{"ast":null,"code":"var _jsxFileName = \"/home/viktoriia/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u0438/GitHub/goit-react-hw-02-phonebook/src/components/ContactForm/ContactForm.jsx\";\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport css from './ContactForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ContactForm extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const {\n        number,\n        name\n      } = this.state;\n      const repeatName = this.state.contacts.find(item => {\n        return item.name === name;\n      });\n\n      if (repeatName) {\n        alert(`${name} is already in your contacts!`);\n        this.reset();\n        return;\n      } else {\n        const newContact = {\n          id: nanoid(),\n          name,\n          number\n        };\n        this.setState(() => {\n          return {\n            contacts: [...this.state.contacts, newContact]\n          };\n        });\n      }\n\n      this.reset();\n    };\n\n    this.reset = () => {\n      this.setState({\n        name: '',\n        number: ''\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: css.phonebook,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: css.name,\n        htmlFor: \"\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleChange,\n          type: \"text\",\n          className: css.userName,\n          name: \"name\",\n          value: value,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: css.number,\n        htmlFor: \"\",\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleChange,\n          type: \"tel\",\n          className: css.userNumber,\n          name: \"number\",\n          value: valueNumber,\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: css.addContact,\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nContactForm.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  valueNumber: PropTypes.string,\n  value: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/viktoriia/Документи/GitHub/goit-react-hw-02-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["PropTypes","Component","css","ContactForm","handleChange","e","name","value","target","setState","handleSubmit","preventDefault","number","state","repeatName","contacts","find","item","alert","reset","newContact","id","nanoid","render","phonebook","userName","userNumber","valueNumber","addContact","propTypes","onChange","func","isRequired","onSubmit","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport css from './ContactForm.module.css';\n\nexport class ContactForm extends Component {\n  // ({ valueNumber, value })\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { number, name } = this.state;\n    const repeatName = this.state.contacts.find(item => {\n      return item.name === name;\n    });\n    if (repeatName) {\n      alert(`${name} is already in your contacts!`);\n      this.reset();\n      return;\n    } else {\n      const newContact = { id: nanoid(), name, number };\n      this.setState(() => {\n        return { contacts: [...this.state.contacts, newContact] };\n      });\n    }\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={handleSubmit} className={css.phonebook}>\n        <label className={css.name} htmlFor=\"\">\n          Name\n          <input\n            onChange={handleChange}\n            type=\"text\"\n            className={css.userName}\n            name=\"name\"\n            value={value}\n            required\n          />\n        </label>\n        <label className={css.number} htmlFor=\"\">\n          Number\n          <input\n            onChange={handleChange}\n            type=\"tel\"\n            className={css.userNumber}\n            name=\"number\"\n            value={valueNumber}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className={css.addContact}>Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  valueNumber: PropTypes.string,\n  value: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}